
// 🚫 Skipped due to direct call to Firebase via `StorageService` in ProfilePage
// ❗ Requires code refactor to be testable with mocks

// ⚠️ This widget test is skipped because profile_page.dart initializes Firebase before we can mock it.
// Since we can't modify the widget (StorageService is hardcoded), this test can't run in isolation.



/*


import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:provider/provider.dart';
import 'package:netscope/screens/home/profile_page.dart';
import 'package:netscope/providers/auth_provider.dart' as my_auth;
import 'package:netscope/services/storage_service.dart';
import 'package:firebase_auth/firebase_auth.dart';


// Mock User
class FakeUser extends Fake implements User {
  @override
  String get uid => 'test-uid';
}

// Mock AuthProvider
class MockAuthProvider extends ChangeNotifier implements my_auth.AuthProvider {
  @override
  User? get user => FakeUser();

  @override
  List<String> get favorites => [];

  @override
  Future<void> addFavorite(String appId) async {}

  @override
  Future<void> fetchFavorites() async {}

  @override
  Future<void> refreshUser() async {}

  @override
  Future<void> removeFavorite(String appId) async {}

  @override
  Future<void> updateProfilePhoto(String photoUrl) async {}
}

// Mock StorageService
class MockStorageService extends Mock implements StorageService {}

void main() {
  late MockAuthProvider mockAuthProvider;
  late MockStorageService mockStorageService;

  setUpAll(() {
    TestWidgetsFlutterBinding.ensureInitialized();
    mockAuthProvider = MockAuthProvider();
    mockStorageService = MockStorageService();
  });

  testWidgets(
    'ProfilePage shows Email card with "Not set", has edit icon on Username, and Change Password dialog opens',
    (WidgetTester tester) async {
      await tester.pumpWidget(
        MultiProvider(
          providers: [
            ChangeNotifierProvider<my_auth.AuthProvider>.value(
              value: mockAuthProvider,
            ),
            Provider<StorageService>.value(
              value: mockStorageService,
            ),
          ],
          child: const MaterialApp(
            home: ProfilePage(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Verify email card shows "Not set"
      expect(find.text('Email'), findsOneWidget);
      expect(find.text('Not set'), findsOneWidget);

      // Verify edit icons are present
      expect(find.byIcon(Icons.edit), findsWidgets);

      // Test Change Password dialog
      await tester.tap(find.text('Change Password'));
      await tester.pumpAndSettle();
      expect(find.text('Enter your new password'), findsOneWidget);

      // Test edit functionality
      await tester.tap(find.byIcon(Icons.edit).first);
      await tester.pumpAndSettle();
      expect(find.byType(TextField), findsWidgets);
    },
  );
}

/*